* Pre-requisite
  CPU : 2 이상
  Memory : 2GB 이상
  Disk : 20 GB 이상
  가상화 tool : Docker, Hyperkit, Hyper-V, ...
  
[1] Minikube 설치

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

sudo install minikube-linux-amd64 /usr/local/bin/minikube

minikube --help

minikube version


[2] Kubectrl 설치 * kubernetes cluster (server) 에 요청을 간편하게 보내기 위한 도구

curl -LO https://dl.k8s.io/release/v1.22.1/bin/linux/amd64/kubectl
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

kubectl version
→ kube server 와 client 의 version 을 모두 출력하는 명령어
→ kube server 를 실행해두지 않기 때문에 client 버전만 출력하는 것임
Client Version: version.Info{Major:"1", Minor:"22", GitVersion:"v1.22.1", GitCommit:"632ed300f2c34f6d6d15ca4cef3d3c7073412212", GitTreeState:"clean", BuildDate:"2021-08-19T15:45:37Z", GoVersion:"go1.16.7", Compiler:"gc", Platform:"linux/amd64"}
Unable to connect to the server: dial tcp 192.168.49.2:8443: connect: no route to host


[3] Minikube 시작하기

① minikube 구동

------------------------------------------
minikube start --driver=docker
------------------------------------------
→ 필요한 docker image 들 다운로드 수행하고 실행


② minikube 내부의 default pod 들의 정상 생성 확인

------------------------------------------
kubectl get pod -n kube-system
------------------------------------------
- kubectl: Kubernetes 클러스터와 상호 작용하기 위한 커맨드 라인 도구
- get: 리소스의 목록을 조회하는 명령어
- pod: 조회할 리소스 유형을 지정, 여기서는 파드(Pod)를 지정.
- -n kube-system: kube-system 네임스페이스의 리소스를 대상으로 합니다. -n은 --namespace의 약어입니다.

* namespace : 클러스터내 리소스를 그룹화하고 격리하는 데 사용되는 추상적인 단위. 하기 기본 namespace 제공
  - default: 별도의 네임스페이스를 지정하지 않고 생성된 리소스가 배치되는 기본 네임스페이스
  - kube-system: Kubernetes 시스템이 사용하는 네임스페이스, 클러스터의 핵심 컴포넌트와 리소스가 여기 위치
  - kube-public: 사용자에게 읽기 전용으로 공개되는 리소스가 위치
  - kube-node-lease: 노드 상태 정보를 저장하는 데 사용


* pod : 쿠베네티스에서 관리하는 배포 가능한 가장 작은 컴퓨팅 단위
  - 쿠베네티스는 pod (docker 컨테이너 들을 감싼) 단위로 스케쥴링, 로드밸런싱, 등의 관리 작업 수행
  - pod 는 stateless 한 특징을 갖고 언제든지 삭제 가능
    → pod 내 application 은 상태를 pod 내부에 저장하지 않음 (pod 는 언제나 재실행, 재스캐쥴링 될 수 있으므로)



[4] Pod 생성하기

① 생성할 리소스(pod) 의 configuration 
   - kubernetes resource 의 desired state 를 기록해놓기 위해 항상 YAML 파일을 저장.

(pod.yaml 파일 생성)
ubuntu@ip-172-31-11-154:~/excercise$vim pod.yaml
apiVersion: v1       # kubernetes resource 의 API Version
kind: Pod            # kubernetes resource name
metadata:            # 메타데이터 : name, namespace, labels, annotations 등을 포함
  name: counter
spec:                # 메인 파트 : resource 의 desired state 를 명시
  containers:
    - name: count    # container 의 이름
      image: busybox # container 의 image
      args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1;done']  # 해당 image 의 entrypoint 의 args 로 입력하고 싶은 부분

② 리소스(pod) 에 configuration 적용

(pod.yaml 로 리소스 생성)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl apply -f pod.yaml
pod/counter created  

(current namespace 의 Pod 목록을 조회)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod 
NAME      READY   STATUS    RESTARTS   AGE
counter   1/1     Running   0          11m

※ current namespace 
- namespace : kubernetes 에서 리소스를 격리하는 가상의(논리적인) 단위
(current namespace 조회)
kubectl config view --minify | grep namespace:

(namespace 목록 조회)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get namespace
NAME              STATUS   AGE
default           Active   67m
kube-node-lease   Active   67m
kube-public       Active   67m
kube-system       Active   67m

(namespace 內 pod 목록 조회)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod -n kube-system
NAME                               READY   STATUS    RESTARTS      AGE
coredns-5d78c9869d-hc266           1/1     Running   0             66m
etcd-minikube                      1/1     Running   0             67m
kube-apiserver-minikube            1/1     Running   0             67m
kube-controller-manager-minikube   1/1     Running   0             67m
kube-proxy-k7wqw                   1/1     Running   0             66m
kube-scheduler-minikube            1/1     Running   0             67m
storage-provisioner                1/1     Running   1 (66m ago)   67m

(모든 namespace 의 pod 목록 조회)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod -A
NAMESPACE     NAME                               READY   STATUS    RESTARTS      AGE
default       counter                            1/1     Running   0             18m
kube-system   coredns-5d78c9869d-hc266           1/1     Running   0             68m
kube-system   etcd-minikube                      1/1     Running   0             68m
kube-system   kube-apiserver-minikube            1/1     Running   0             68m
kube-system   kube-controller-manager-minikube   1/1     Running   0             68m
kube-system   kube-proxy-k7wqw                   1/1     Running   0             68m
kube-system   kube-scheduler-minikube            1/1     Running   0             68m
kube-system   storage-provisioner                1/1     Running   1 (67m ago)   68m


(특정 pod 의 정보 조회)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl describe pod counter 
Name:         counter
Namespace:    default
Priority:     0
Node:         minikube/192.168.49.2
Start Time:   Sat, 30 Sep 2023 03:50:48 +0000
Labels:       <none>
Annotations:  <none>
Status:       Running
IP:           10.244.0.3
IPs:
  IP:  10.244.0.3
Containers:
  count:
    Container ID:  docker://1c3b1b5186ab7c5188b3544ac82515fb8fe785c98ddc1e70b911b55d9a60e92c
    Image:         busybox
    Image ID:      docker-pullable://busybox@sha256:3fbc632167424a6d997e74f52b878d7cc478225cffac6bc977eedfe51c7f4e79
    Port:          <none>
    Host Port:     <none>

... 이하생략


(특정 pod 정보를 yaml 로 출력하기)
kubectl get pod counter -o yaml | tee a.yaml


[5] Pod 로그 확인하기
- counter pod 는 1초에 1번씩 현재시간을 출력하도록 구성했음

ubuntu@ip-172-31-11-154:~/excercise$ kubectl logs counter
1450: Sat Sep 30 04:15:06 UTC 2023
1451: Sat Sep 30 04:15:07 UTC 2023
1452: Sat Sep 30 04:15:08 UTC 2023
1453: Sat Sep 30 04:15:09 UTC 2023
1454: Sat Sep 30 04:15:10 UTC 2023
1455: Sat Sep 30 04:15:11 UTC 2023
...

- pod 내 복수개의 container 가 있을 수 있어 pod, container 를 모두 지정해서 log 출력
  * counter 는 pod , count 는 container 이름

ubuntu@ip-172-31-11-154:~/excercise$ kubectl logs counter count
1450: Sat Sep 30 04:15:06 UTC 2023
1451: Sat Sep 30 04:15:07 UTC 2023
1452: Sat Sep 30 04:15:08 UTC 2023
1453: Sat Sep 30 04:15:09 UTC 2023
1454: Sat Sep 30 04:15:10 UTC 2023
1455: Sat Sep 30 04:15:11 UTC 2023
...


[6] Pod 내부 접속
- '--' 다음에 pod 에 전달할 명령어


ubuntu@ip-172-31-11-154:~/excercise$ kubectl exec -it counter -- sh 
/ # 
/ # pwd

* kubctl exec -it counter -c coount -- sh 와 같음


[7] Pod 삭제하기

(counter Pod 삭제하기)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl delete pod counter
pod "counter" deleted

(default namespace 의 pod 가 없음을 확인)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod -A
NAMESPACE     NAME                               READY   STATUS    RESTARTS      AGE
kube-system   coredns-5d78c9869d-hc266           1/1     Running   0             86m
kube-system   etcd-minikube                      1/1     Running   0             86m
kube-system   kube-apiserver-minikube            1/1     Running   0             86m
kube-system   kube-controller-manager-minikube   1/1     Running   0             86m
kube-system   kube-proxy-k7wqw                   1/1     Running   0             86m
kube-system   kube-scheduler-minikube            1/1     Running   0             86m
kube-system   storage-provisioner                1/1     Running   1 (85m ago)   86m


[6] Deployment 로 Pod 생성, 배포하기

* Pod는 실행 중인 애플리케이션의 인스턴스를 나타내며, 
  Deployment는 이러한 Pod를 관리하고 원하는 상태를 유지하기 위한 고수준의 메커니즘 제공

- Pod: Pod는 쿠버네티스에서의 최소 배포 단위
  . 각 Pod는 하나 이상의 컨테이너로 구성될 수 있으며, 같은 로컬 네트워크와 스토리지를 공유
  . Pod는 일반적으로 직접 관리되지 않고 고수준 리소스 (예: Deployment, StatefulSet, DaemonSet 등)에 의해 관리
  
- Deployment: Deployment는 Pod의 선언적 업데이트와 스케일링을 제공하는 리소스
  . Deployment는 원하는 상태 (예: Pod의 복제 수, 사용할 이미지 및 버전 등)를 정의하고, 쿠버네티스가 그 상태를 유지하도록 지시
  . Deployment는 내부적으로 ReplicaSet을 사용하여 Pod의 복제를 관리
 . Deployment를 사용하면 롤링 업데이트, 롤백, 스케일링 등의 기능을 사용할 수 있음


(Deployment.yaml)
apiVersion: apps/v1 # kubernetes resource 의 API Version
kind: Deployment # kubernetes resource name
metadata: # 메타데이터 : name, namespace, labels, annotations 등을 포함
  name: nginx-deployment
  labels:
    app: nginx
spec: # 메인 파트 : resource 의 desired state 를 명시
  replicas: 3 # 동일한 template 의 pod 을 3 개 복제본으로 생성합니다.
  selector:
    matchLabels:
      app: nginx
  template: # Pod 의 template 을 의미합니다.
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx # container 의 이름
        image: nginx:1.14.2 # container 의 image
        ports:
        - containerPort: 80 # container 의 내부 Port


(deployment 리소스 생성, 실행하기)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl apply -f deployment.yaml 
deployment.apps/nginx-deployment created

(deployment 조회하기)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get deployment
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment   3/3     3            3           63s

ubuntu@ip-172-31-11-154:~/excercise$ kubectl get deployment -A
NAMESPACE     NAME               READY   UP-TO-DATE   AVAILABLE   AGE
default       nginx-deployment   3/3     3            3           66s
kube-system   coredns            1/1     1            1           99m

(deploy 된 pod 정보도 함께 조회하기)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get deployment,pod
NAME                               READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/nginx-deployment   3/3     3            3           2m33s

NAME                                   READY   STATUS    RESTARTS   AGE
pod/nginx-deployment-cbdccf466-fx4jb   1/1     Running   0          2m33s
pod/nginx-deployment-cbdccf466-kcfqw   1/1     Running   0          2m33s
pod/nginx-deployment-cbdccf466-xstxl   1/1     Running   0          2m33s

(pod 세부 정보 확인하기)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl describe pod/nginx-deployment-cbdccf466-fx4jb
Name:         nginx-deployment-cbdccf466-fx4jb
Namespace:    default
Priority:     0
Node:         minikube/192.168.49.2
Start Time:   Sat, 30 Sep 2023 04:39:19 +0000
Labels:       app=nginx
              pod-template-hash=cbdccf466
Annotations:  <none>
Status:       Running
IP:           10.244.0.5    ← pod 별로 IP 서로 달리 할당됨
IPs:
  IP:           10.244.0.5
Controlled By:  ReplicaSet/nginx-deployment-cbdccf466
Containers:
  nginx:
    Container ID:   docker://7d8cac9f981f07f2e235930242e83721134dfa6b4267641753229ede517395f9
    Image:          nginx:1.14.2
    Image ID:       docker-pullable://nginx@sha256:f7988fb6c02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sat, 30 Sep 2023 04:39:29 +0000
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-c9dhv (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  kube-api-access-c9dhv:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  4m10s  default-scheduler  Successfully assigned default/nginx-deployment-cbdccf466-fx4jb to minikube
  Normal  Pulling    4m9s   kubelet            Pulling image "nginx:1.14.2"
  Normal  Pulled     4m     kubelet            Successfully pulled image "nginx:1.14.2" in 1.859256716s (8.468331015s including waiting)
  Normal  Created    4m     kubelet            Created container nginx
  Normal  Started    4m     kubelet            Started container nginx


[7] Deployment 기능 활용해보기

(Autohealing) pod 를 delete 해도 다시 3개의 pod 로 복원됨 (이때 새로운 pod 가 생성됨)

ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod
NAME                               READY   STATUS    RESTARTS   AGE
nginx-deployment-cbdccf466-fx4jb   1/1     Running   0          9m10s
nginx-deployment-cbdccf466-kcfqw   1/1     Running   0          9m10s
nginx-deployment-cbdccf466-xstxl   1/1     Running   0          9m10s

buntu@ip-172-31-11-154:~/excercise$ kubectl delete pod nginx-deployment-cbdccf466-fx4jb
pod "nginx-deployment-cbdccf466-fx4jb" deleted

ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod
NAME                               READY   STATUS    RESTARTS   AGE
nginx-deployment-cbdccf466-kcfqw   1/1     Running   0          9m31s
nginx-deployment-cbdccf466-vrsfw   1/1     Running   0          5s     	← 새로 생성된 pod
nginx-deployment-cbdccf466-xstxl   1/1     Running   0          9m31s

(Scale 조정하기)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl scale deployment/nginx-deployment --replicas=5
deployment.apps/nginx-deployment scaled
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod
NAME                               READY   STATUS    RESTARTS   AGE
nginx-deployment-cbdccf466-hnm95   1/1     Running   0          6s
nginx-deployment-cbdccf466-k5cb6   1/1     Running   0          113s
nginx-deployment-cbdccf466-l9cfc   1/1     Running   0          6s
nginx-deployment-cbdccf466-qw8cp   1/1     Running   0          113s
nginx-deployment-cbdccf466-zt8dj   1/1     Running   0          113s


[8] Deployment 삭제하기

ubuntu@ip-172-31-11-154:~/excercise$ kubectl delete deployment nginx-deployment
deployment.apps "nginx-deployment" deleted

ubuntu@ip-172-31-11-154:~/excercise$ kubectl get deployment
No resources found in default namespace.



[9] Service 구성하기

Deployment : 애플리케이션의 실행 상태를 관리하고 업데이트하는 데 사용
- Pod의 생성, 삭제 및 업데이트를 관리
- 원하는 Pod의 복제 수를 유지하고 롤링 업데이트와 같은 전략을 통해 애플리케이션을 업데이트
- 내부적으로 ReplicaSet을 사용하여 Pod의 복제를 관리
- 사용 사례: 애플리케이션의 배포, 스케일링 및 롤링 업데이트 등.

Service: 네트워크를 통해 하나 이상의 Pod에 접근하기 위한 안정적인 방법을 제공
- 서비스는 쿠버네티스 클러스터 내에서 (또는 외부에서) Pod에 대한 안정적인 IP 주소와 포트를 제공
   * Pod 은 IP 를 할당받고 생성되지만, 언제든지 죽었다가 다시 살아날 수 있으며, 그 과정
     에서 IP 는 항상 재할당받기에 고정된 IP 로 원하는 Pod 에 접근할 수는 없음
- Pod가 생성되거나 종료될 때, 서비스는 동적으로 Pod를 검색하고 트래픽을 적절한 Pod로 라우팅
- 서비스 유형에 따라 (예: NodePort, LoadBalancer, ClusterIP) 다양한 네트워크 접근 전략을 제공
- 사용 사례: 클러스터 외부에서 애플리케이션에 접근하거나, 클러스터 내 다른 서비스가 다른 서비스에 접근할 때 사용

(deployment 구성하기)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod -o wide
NAME                               READY   STATUS    RESTARTS   AGE     IP            NODE       NOMINATED NODE   READINESS GATES
nginx-deployment-cbdccf466-4l5kg   1/1     Running   0          2m41s   10.244.0.15   minikube   <none>           <none>
nginx-deployment-cbdccf466-rssqx   1/1     Running   0          2m41s   10.244.0.13   minikube   <none>           <none>
nginx-deployment-cbdccf466-vrbmt   1/1     Running   0          2m41s   10.244.0.14   minikube   <none>           <none>
ubuntu@ip-172-31-11-154:~/excercise$ ping 10.224.0.15
PING 10.224.0.15 (10.224.0.15) 56(84) bytes of data.
^C
--- 10.224.0.15 ping statistics ---
47 packets transmitted, 0 received, 100% packet loss, time 47112ms


(minikube 내부에서 pod 접근해보기)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod -o wide
NAME                               READY   STATUS    RESTARTS   AGE     IP            NODE       NOMINATED NODE   READINESS GATES
nginx-deployment-cbdccf466-4l5kg   1/1     Running   0          6m20s   10.244.0.15   minikube   <none>           <none>
nginx-deployment-cbdccf466-rssqx   1/1     Running   0          6m20s   10.244.0.13   minikube   <none>           <none>
nginx-deployment-cbdccf466-vrbmt   1/1     Running   0          6m20s   10.244.0.14   minikube   <none>           <none>

ubuntu@ip-172-31-11-154:~/excercise$ minikube ssh
docker@minikube:~$ 
docker@minikube:~$ ping 10.244.0.15 
PING 10.244.0.15 (10.244.0.15) 56(84) bytes of data.
64 bytes from 10.244.0.15: icmp_seq=1 ttl=64 time=0.082 ms
64 bytes from 10.244.0.15: icmp_seq=2 ttl=64 time=0.045 ms
64 bytes from 10.244.0.15: icmp_seq=3 ttl=64 time=0.047 ms


docker@minikube:~$ curl -X GET 10.244.0.15 -vvv
Note: Unnecessary use of -X or --request, GET is already inferred.
*   Trying 10.244.0.15:80...
* Connected to 10.244.0.15 (10.244.0.15) port 80 (#0)
> GET / HTTP/1.1
> Host: 10.244.0.15
> User-Agent: curl/7.81.0
> Accept: */*
> 
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Server: nginx/1.14.2
< Date: Sat, 30 Sep 2023 05:27:34 GMT
< Content-Type: text/html
< Content-Length: 612
< Last-Modified: Tue, 04 Dec 2018 14:44:49 GMT


(pod deploy 하고 service 구성하기)
(deployment.yaml)
apiVersion: apps/v1 # kubernetes resource 의 API Version
kind: Deployment # kubernetes resource name
metadata: # 메타데이터 : name, namespace, labels, annotations 등을 포함
  name: nginx-deployment
  labels:
    app: nginx
spec: # 메인 파트 : resource 의 desired state 를 명시
  replicas: 3 # 동일한 template 의 pod 을 3 개 복제본으로 생성합니다.
  selector:
    matchLabels:
      app: nginx
  template: # Pod 의 template 을 의미합니다.
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx # container 의 이름
        image: nginx:1.14.2 # container 의 image
        ports:
        - containerPort: 80 # container 의 내부 Port

(service.yaml)
apiVersion: v1
  kind: Service
  metadata:
    name: my-nginx
    labels:
      run: my-nginx
spec:
  type: NodePort # Service 의 Type 을 명시
  ports:
  - port: 80
    protocol: TCP
  selector: # 아래 label 을 가진 Pod 을 매핑
    app: nginx

(service.yaml)
apiVersion: v1
kind: Service
metadata:
  name: my-nginx
  labels:
    run: my-nginx
spec:
  type: NodePort # Service 의 Type 을 명시 (pod 가 스케쥴링된 node 의 ip 사용하되 port 를 따로)
                         # minikube 자체가 node 가 하나인 cluster , node ip 는 minikube ip 로 얻을 수 있음
  ports:
  - port: 80
    protocol: TCP
  selector: # 아래 label 을 가진 Pod 을 매핑
    app: nginx

(service 실행하고 확인)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl apply -f ./service.yaml 
service/my-nginx created
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get service
NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1     <none>        443/TCP        152m
my-nginx     NodePort    10.108.8.73   <none>        80:31398/TCP   6s


(minikube 외부에서 접근하기)
ubuntu@ip-172-31-11-154:~/excercise$ minikube ip
192.168.49.2

ubuntu@ip-172-31-11-154:~/excercise$ curl -X GET 192.168.49.2:31398
# ubuntu@ip-172-31-11-154:~/excercise$ curl -X GET $(minikube ip):31398
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>


[10] Persistent Volume Claim 

Persistent Volume (PV), Persistent Volume Claim (PVC) 는 stateless 한 Pod 이
영구적으로(persistent) 데이터를 보존하고 싶은 경우 사용하는 리소스
- Pod 내부에서 작성한 데이터는 기본적으로 언제든지 사라질 수 있기에, 보존하고
  싶은 데이터가 있다면 Pod 에 PVC 를 mount 해서 사용해야

(pvc.yaml)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myclaim
spec: # pvc 의 정보를 입력하는 파트입니다.
  accessModes:
    - ReadWriteMany # ReadWriteOnce, ReadWriteMany 옵션을 선택할 수 있습니다.
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Mi # storage 용량을 설정합니다.
  storageClassName: standard # 방금 전에 확인한 storageclass 의 name 을 입력합니다.

(pvc 생성하고 확인)
(pod-pvc.yaml)
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: myfrontend
      image: nginx
      volumeMounts:
        - mountPath: "/var/www/html" # mount 할 pvc 를 mount 할 pod 의 경로
          name: mypd # 아래 volumes[0].name 과 일치 필요
  volumes:
    - name: mypd # 위의 volumeMounts[0].name 과 일치 필요 
      persistentVolumeClaim:
        claimName: myclaim # mount 할 pvc 의 name 

ubuntu@ip-172-31-11-154:~/excercise$ kubectl apply -f ./pvc.yaml 
persistentvolumeclaim/myclaim created
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pvc
NAME      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
myclaim   Bound    pvc-00490e33-6c83-41bb-bb3c-757da4587f7e   10Mi       RWX            standard       14s


(pod 에서 pvc 사용해서 파일 생성)
buntu@ip-172-31-11-154:~/excercise$ kubectl exec -it mypod -- bash
root@mypod:/# touch hello-world
root@mypod:/# ls
bin   dev                  docker-entrypoint.sh  hello-world  lib    lib64   media  opt   root  sbin  sys  usr
boot  docker-entrypoint.d  etc                   home         lib32  libx32  mnt    proc  run   srv   tmp  var
root@mypod:/# pwd
/
root@mypod:/# cd /var/www/html/
root@mypod:/var/www/html# ls
root@mypod:/var/www/html# touch hello-world
root@mypod:/var/www/html# ls
hello-world

(pod 종료 후 다시 실행해서 파일 존재 여부 확인)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pod
NAME                               READY   STATUS    RESTARTS   AGE
mypod                              1/1     Running   0          3m21s
nginx-deployment-cbdccf466-4l5kg   1/1     Running   0          45m
nginx-deployment-cbdccf466-rssqx   1/1     Running   0          45m
nginx-deployment-cbdccf466-vrbmt   1/1     Running   0          45m

ubuntu@ip-172-31-11-154:~/excercise$ kubectl delete pod mypod
pod "mypod" deleted

ubuntu@ip-172-31-11-154:~/excercise$ kubectl apply -f pod-pvc.yaml
pod/mypod created

ubuntu@ip-172-31-11-154:~/excercise$ kubectl exec -it mypod -- bash
root@mypod:/# ls
bin   dev                  docker-entrypoint.sh  home  lib32  libx32  mnt  proc  run   srv  tmp  var
boot  docker-entrypoint.d  etc                   lib   lib64  media   opt  root  sbin  sys  usr
root@mypod:/# cd /var/www/html/
root@mypod:/var/www/html# ls
hello-world
root@mypod:/var/www/html# 

(pvc 삭제)
ubuntu@ip-172-31-11-154:~/excercise$ kubectl delete pvc myclaim
persistentvolumeclaim "myclaim" deleted
ubuntu@ip-172-31-11-154:~/excercise$ kubectl get pv,pvc
No resources found