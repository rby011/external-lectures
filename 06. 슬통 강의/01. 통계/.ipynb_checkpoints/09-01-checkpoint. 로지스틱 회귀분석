{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c14c993c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#\n",
    "# -------------------------------------------------------------------------------------------------------------------\n",
    "#                                                Logistic Regression 개념\n",
    "# -------------------------------------------------------------------------------------------------------------------\n",
    "#\n",
    "# [개념]\n",
    "# 로지스틱 회귀모델은 확률 p 의 odds 를 선형모형으로 모델링한 것\n",
    "# - z = logit(p) = log (p / (1 - p)) = log (odds(p)) =β0 + β1x1 + β2x2 + ... + βkxk\n",
    "#\n",
    "# 확률 p 는 회귀모델 출력값 z 로 구성된 로지스틱 함수의 형태\n",
    "# - P( Y = 1 | X ) = 1 / ( 1 + e^(-z) ) ......... 독립변수 X 가 주어졌을 때 1 로 분류될 확률\n",
    "#     → z = log ( p / ( 1 - p ) ) \n",
    "#     → e^z = p / ( 1 - p )\n",
    "#     → ( 1 - p ) * e^z = p   →   e^z - p * e^z = p   →   e^ z = ( 1 + e^z ) * p \n",
    "#     → p = e^z / ( 1 + e^z ) = 1 / (1 + e^(-z))\n",
    "#\n",
    "# 로지스틱 함수는 입력(z) 에 무관하게 0 ~ 1 사이의 값을 갖아 확률값 모델에 유용 ... 이 경우는 우연의 일치겠지만\n",
    "# - f(z) = 1 / (1 + e^(-z)) = e^z / ( e^z + 1 )\n",
    "#\n",
    "# 로직스틱 회귀모델의 회귀식에서 구해진 z 를 로지스틱 함수의 입력으로 넣은 결과가 X 가 주어졌을 때 Y 가 1 로 분류될 확률\n",
    "# - P( Y = 1 | X ) = e^z / ( e^z + 1 )\n",
    "#                  = e^(β0 + β1x1 + β2x2 + ... + βkxk) / ( 1 + e^(β0 + β1x1 + β2x2 + ... + βkxk))\n",
    "# \n",
    "# 오즈비율(odds_ratio)을 통해 독립변수의 영항력을 해석과 비교\n",
    "# - 특정 독립변수의 오즈비율 (odds ratio) 는 odds(x + 1) / odds(x) = e^(βi)  .... 모델 적합해서 구한 회귀계수에 지수를 취한 것!!\n",
    "#   . 오즈 비율이 1보다 크거나 작으면, 해당 독립 변수의 단위 증가가 종속 변수가 1이 될 확률을 증가 또는 감소\n",
    "#   . 오즈 비율이 1보다 크면, 해당 독립 변수의 단위 증가가 종속 변수가 1이 될 확률을 증가\n",
    "#\n",
    "# [오즈 비율 유도]\n",
    "# - P(Y=1|X) = 1 / (1 + e^(-z)) , z = β0 + β1X1 + β2X2 + ... + βkXk 일때  X1 의 오즈비율은 e^(β1)\n",
    "#    → odds_ratio  = odds_after / odds_before \n",
    "#    → odds_after  = P(Y=1|X1=x+1) / P(Y=0|X1=x+1) = e^(z+β1) / (1 + e^(z+β1))\n",
    "#       .... z' = β0 + β1(X1 + 1) + β2X2 + ... + βkXk = (β0 + β1X1 + β2X2 + ... + βkXk) + β1 = z + β1\n",
    "#       .... P(Y=1|X1=x+1) = 1 / (1 + e^(-z')) = e^(z') / (1 + e^(z')) = e^(z+β1) / (1 + e^(z+β1))\n",
    "#       .... P(Y=0|X1=x+1) = 1 - P(Y=1|X1=x+1) = 1 - e^(z+β1) / (1 + e^(z+β1)) = 1 / (1 + e^(z+β1))\n",
    "#    → odds_before = P(Y=1|X1=x)   / P(Y=0|X1=x)   = e^(z) / (1 + e^(z))\n",
    "#       .... P(Y=1|X1=x) = 1 / (1 + e^(-z)) = e^z / (1 + e^z)\n",
    "#       .... P(Y=0|X1=x) = 1 - P(Y=1|X1=x) = 1 - e^z / (1 + e^z) = (1 + e^z - e^z) / (1 + e^z) = 1 / (1 + e^z)                    \n",
    "#    → odss_ratio = odds_after / odds_before = e^(β1) \n",
    "#       .... { e^(z+β1) / (1 + e^(z+β1)) } / { 1 / (1 + e^z) }  \n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "961f487d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\chsun\\AppData\\Local\\Temp\\ipykernel_34064\\3055881803.py:27: RuntimeWarning: divide by zero encountered in log\n",
      "  log_y = np.log(y)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Intercept    0.632653\n",
       "rank        -0.567486\n",
       "dtype: float64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#\n",
    "# 오즈(Odds)\n",
    "# - 사건이 발생할 확률이 그렇지 않을 확률보다 몇 배가 더 큰가? \n",
    "#   . Odds (A) = P (A) / ( 1 - P(A) )\n",
    "# \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from statsmodels.formula.api import ols\n",
    "# 대학교 입학 데이터\n",
    "data = pd.read_csv(\"./data/admission2.csv\")\n",
    "\n",
    "# Odds (Admit)\n",
    "# - Odds 값 '1' 을 기준으로 낮은 경우 , 발생하기 어렵다는 의미\n",
    "prob_admit = data['admit'].mean()   # 0.372\n",
    "odds_admit = prob_admit / (1 - prob_admit)     # 0.465   →  입학할 확률이 그렇지 않을 확률보다 작음\n",
    "\n",
    "# Odds 값의 범위\n",
    "# - x : 확률 , y : 오즈\n",
    "x = np.arange(0, 1, 0.001)\n",
    "y = x / (1 - x)\n",
    "plt.scatter(x, y)\n",
    "plt.show()\n",
    "\n",
    "# log(odds)\n",
    "log_y = np.log(y)\n",
    "plt.scatter(x, log_y)\n",
    "plt.show()\n",
    "\n",
    "# 범주형 변수의 Odds\n",
    "# - rank 별 : 입학 확률, odds  \n",
    "prob_admit_rank = data.groupby('rank')['admit'].sum() / data.groupby('rank')['admit'].count()\n",
    "odds_admit_rank = prob_admit_rank / (1 - prob_admit_rank)\n",
    "df = pd.DataFrame()\n",
    "df['prob_admit'] = prob_admit_rank\n",
    "df['odds_admit'] = odds_admit_rank\n",
    "df['log_odds_admit'] = np.log(df['odds_admit'])\n",
    "df.reset_index(inplace = True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "8dbb912d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rank</th>\n",
       "      <th>prob_admit</th>\n",
       "      <th>odds_admit</th>\n",
       "      <th>log_odds_admit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.540984</td>\n",
       "      <td>1.178571</td>\n",
       "      <td>0.164303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.357616</td>\n",
       "      <td>0.556701</td>\n",
       "      <td>-0.585727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.231405</td>\n",
       "      <td>0.301075</td>\n",
       "      <td>-1.200395</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rank  prob_admit  odds_admit  log_odds_admit\n",
       "0     1    0.540984    1.178571        0.164303\n",
       "1     2    0.357616    0.556701       -0.585727\n",
       "2     3    0.231405    0.301075       -1.200395"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(array([[-0.57742887]]), array([0.61624871]))"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#\n",
    "# Logistic Regression 의 개념적 접근\n",
    "# [NOTE] 하단 접근법은 올바르지 않지만 개념 이해를 위한 것\n",
    "# \n",
    "# 범주형 변수의 Odds\n",
    "# - rank 별 : 입학 확률, odds  \n",
    "prob_admit_rank = data.groupby('rank')['admit'].sum() / data.groupby('rank')['admit'].count()\n",
    "odds_admit_rank = prob_admit_rank / (1 - prob_admit_rank)\n",
    "df = pd.DataFrame()\n",
    "df['prob_admit'] = prob_admit_rank\n",
    "df['odds_admit'] = odds_admit_rank\n",
    "df['log_odds_admit'] = np.log(df['odds_admit'])\n",
    "df.reset_index(inplace = True)\n",
    "display(df.head(3))\n",
    "\n",
    "\n",
    "# Conceptual Logitsitc Regression (정확한 것이 아니고 개념적으로만)\n",
    "model = ols(formula = 'log_odds_admit ~ rank', data = df).fit()\n",
    "model.params\n",
    "# Intercept    0.632653\n",
    "# rank        -0.567486\n",
    "\n",
    "# rank 회귀계수의 의미는 rank 가 1 증가하면 합격 odds 가 0.567 줄어든다는 의미\n",
    "# → 직관적이지 않으므로 회귀식의 양변에 지수를 취함\n",
    "# \n",
    "# 회귀식은 아래와 같이 정의됨\n",
    "#   log (odds_rank) = 0.62 - 0.57*x \n",
    "#   → odds_rank = exp (0.62 - 0.57*x) = exp(0.62) * exp(-0.57*x)\n",
    "#\n",
    "# * [참고] 오즈비(Odds Ratio)를 통해서도 이 경향성을 동일하게 파악할 수 있음\n",
    "#   - 오즈비(Odds Ratio)는 한 단위 증가할 때의 Odds 증가량\n",
    "#     Odds(x_rank + 1) / Odds(x_rank) \n",
    "#     = {epx(0.632) * exp(-0.567*(x + 1)} /  { exp (0.632) * exp(-0.567*x) } \n",
    "#     = exp(-0.567*(x + 1)) / exp(-0.567*x)   \n",
    "#     = exp(-0.567) = 0.567 \n",
    "# \n",
    "# 오즈를 이용한 확률 역산 : P(A) = odds / (odds + 1)\n",
    "# - P(x_rank) =   exp (0.62 - 0.57*x) / (  exp (0.62 - 0.57*x) + 1)\n",
    "# - 이를 통해서 각 등급별 입학 확률을 계산 할 수 있음\n",
    "# \n",
    "prob_admit_rank2 = np.exp (0.72 - 0.57 * df['rank']) / ( np.exp (0.72 - 0.57 * df['rank']) + 1)\n",
    "prob_admit_rank2, prob_admit_rank  # 유사함을 볼 수 있음\n",
    "\n",
    "\n",
    "# sklearn.linear_model.LogisticRegression 적합을 통해 어느정도 유사함을 볼 수 있음\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "model = LogisticRegression(random_state=1234).fit(data[['rank']],data['admit'])\n",
    "model.coef_ , model.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "1006a022",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>ses</th>\n",
       "      <th>gender</th>\n",
       "      <th>race</th>\n",
       "      <th>rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>380</td>\n",
       "      <td>3.61</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>660</td>\n",
       "      <td>3.67</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>800</td>\n",
       "      <td>4.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   admit  gre   gpa  ses  gender  race  rank\n",
       "0      0  380  3.61    1       0     3     3\n",
       "1      1  660  3.67    2       0     2     3\n",
       "2      1  800  4.00    2       0     2     1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>ses</th>\n",
       "      <th>gender</th>\n",
       "      <th>race</th>\n",
       "      <th>rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>400.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.317500</td>\n",
       "      <td>587.700000</td>\n",
       "      <td>3.389900</td>\n",
       "      <td>1.992500</td>\n",
       "      <td>0.475</td>\n",
       "      <td>1.962500</td>\n",
       "      <td>2.48500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.466087</td>\n",
       "      <td>115.516536</td>\n",
       "      <td>0.380567</td>\n",
       "      <td>0.808751</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.823279</td>\n",
       "      <td>0.94446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>2.260000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>520.000000</td>\n",
       "      <td>3.130000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>580.000000</td>\n",
       "      <td>3.395000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>660.000000</td>\n",
       "      <td>3.670000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>800.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            admit         gre         gpa         ses   gender        race  \\\n",
       "count  400.000000  400.000000  400.000000  400.000000  400.000  400.000000   \n",
       "mean     0.317500  587.700000    3.389900    1.992500    0.475    1.962500   \n",
       "std      0.466087  115.516536    0.380567    0.808751    0.500    0.823279   \n",
       "min      0.000000  220.000000    2.260000    1.000000    0.000    1.000000   \n",
       "25%      0.000000  520.000000    3.130000    1.000000    0.000    1.000000   \n",
       "50%      0.000000  580.000000    3.395000    2.000000    0.000    2.000000   \n",
       "75%      1.000000  660.000000    3.670000    3.000000    1.000    3.000000   \n",
       "max      1.000000  800.000000    4.000000    3.000000    1.000    3.000000   \n",
       "\n",
       "            rank  \n",
       "count  400.00000  \n",
       "mean     2.48500  \n",
       "std      0.94446  \n",
       "min      1.00000  \n",
       "25%      2.00000  \n",
       "50%      2.00000  \n",
       "75%      3.00000  \n",
       "max      4.00000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.573786\n",
      "         Iterations 6\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[2.81960331e-02, 3.24928845e-02, 1.32605153e-05, 5.40521161e-01,\n",
       "        4.98413636e-03]])"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#\n",
    "# -------------------------------------------------------------------------------------------------------------------\n",
    "#                                         Logistic Regression 모델 적합과 회귀계수의 검정\n",
    "# -------------------------------------------------------------------------------------------------------------------\n",
    "#\n",
    "# \n",
    "# Likelihood ratio Test(LR 검정)로 모델 유의성 검정\n",
    "# - 귀무가설 : β = 0 , 대립가설 : 0 이 아닌 회귀계수가 존재\n",
    "# - 검정 통계량 : Λ = -2 * ( l(β_hat_null) - l(β_hat) ) ~ κ²(k - r)     * l() 은 log_likelihood \n",
    "#\n",
    "# Wald Test로 통한 회귀 계수 유의성 검정\n",
    "# - 귀무가설 : βi = 0 , 대립가설 : βi ≠ 0\n",
    "# - 검정 통계량 : z = β_hat / SE_β_hat ~ N ( 0, 1² )\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.stats import norm\n",
    "from statsmodels.formula.api import logit\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "def gender_replace(x):\n",
    "    if(x == 'F'):\n",
    "        return 0\n",
    "    elif(x == 'M'):\n",
    "        return 1\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "data = pd.read_csv('./data/admission2.csv')\n",
    "data = data.rename(columns=lambda x : x.lower())\n",
    "data['gender'] = data['gender'].apply(func = gender_replace)\n",
    "display(data.head(3))\n",
    "display(data.describe())\n",
    "\n",
    "#\n",
    "# (1) statsmodels.formula.api.logit 을 통해 모델 적합하고 검정 결과를 summary() 를 통해 확인\n",
    "#\n",
    "model1 = logit(formula='admit ~ gre + gpa + rank + gender',data=data).fit()\n",
    "# 모델 적합 결과를 summary() 를 통해 확인 가능 \n",
    "# - LR 검정 결과(모델 유의성)        : LLR p-value  (귀무가설 : 회귀식의 모든 회귀계수는 모두 0 임) → 즉, 회귀식이 의미가 없고 평균값을 의미하는 절편이 최선임\n",
    "# - Wald 검정 결과(회귀계수의 유의성) : P > |z|      (귀무가설 : 특정 회귀계수는 0 임)\n",
    "#\n",
    "# Logit Regression Results\n",
    "# Dep. Variable:\tadmit\t    No. Observations:\t400\n",
    "# Model:\tLogit\t            Df Residuals:\t395\n",
    "# Method:\tMLE\t                Df Model:\t4\n",
    "# Date:\tMon, 03 Apr 2023\t    Pseudo R-squ.:\t0.08190\n",
    "# Time:\t12:18:27\t            Log-Likelihood:\t-229.51\n",
    "# converged:\tTrue\t        LL-Null:\t-249.99\n",
    "# Covariance Type:\tnonrobust\tLLR p-value:\t2.756e-08\n",
    "#            coef\t    std err\tz\t    P>|z|\t[0.025\t0.975]\n",
    "# Intercept\t-3.3667\t    1.141\t-2.952\t0.003\t-5.602\t-1.131\n",
    "# gre\t     0.0023\t    0.001\t2.109\t0.035\t0.000\t0.004\n",
    "# gpa\t     0.7733\t    0.328\t2.358\t0.018\t0.131\t1.416\n",
    "# rank\t    -0.5634\t    0.127\t-4.419\t0.000\t-0.813\t-0.313\n",
    "# gender\t-0.1459\t    0.227\t-0.642\t0.521\t-0.591\t0.299\n",
    "model1.summary()\n",
    "\n",
    "#\n",
    "# (2) sklearn.linear_model.LogisticRegression 을 통해 모델 적합하고 직접 검정해보기\n",
    "#- \n",
    "\n",
    "# 모델 적합\n",
    "# admit ~ gre + gap + rank + gender\n",
    "y = data['admit']\n",
    "X = data[['gre','gpa','rank','gender']]\n",
    "model2 = LogisticRegression(random_state=1234).fit(X=X,y=y)\n",
    "# model.intercept_ , model.coef_\n",
    "# [-3.18837101], [ 0.00239433,  0.69778363, -0.55295011, -0.13872399]\n",
    "\n",
    "#\n",
    "# 모델 유의성 검정 : Likelihoood Ratio Test (LR Test)\n",
    "# - Λ = -2 * ( l(β_hat_null) - l(β_hat) ) ~ κ²(k - r)\n",
    "\n",
    "\n",
    "\n",
    "#\n",
    "# 회귀계수 검정 : Wald Test\n",
    "# - zi = β-i / standard_error_i\n",
    "#\n",
    "# 1. 피처 행렬 X를 구성 (n은 샘플의 개수, k는 독립변수의 개수, 여기서는 절편(intercept) 항까지 포함합니다).\n",
    "# 2. 각 샘플의 예측 확률을 구함\n",
    "#    - P(Y=1|X) = 1 / (1 + e^(-z))\n",
    "# 3. 예측 확률을 사용하여 각 샘플의 가중치 행렬 V를 구함\n",
    "#    - V = diag(P(Y=1|X) * (1 - P(Y=1|X)))\n",
    "# 4. 피처 행렬 X와 가중치 행렬 V를 사용하여 공분산 행렬을 구합\n",
    "#    - cov_matrix = (X.T * V * X)^(-1)\n",
    "# 5. 공분산 행렬의 대각 성분에서 표준 오차 구함\n",
    "#    - standard_errors = sqrt(diag(cov_matrix))\n",
    "# 6. 검정 통계량을 계산하고 분포에서 확인\n",
    "#    - z = β-i / standard_error_i\n",
    "\n",
    "# 2. 각 샘플의 예측 확률을 구함\n",
    "probability = model2.predict_proba(X)\n",
    "# 3. 예측 확률을 사용하여 각 샘플의 가중치 행렬 V를 구함\n",
    "V = np.diag(probability[:, 0] * probability[:, 1])\n",
    "X = X.assign(intercept=1)\n",
    "\n",
    "# 4. 피처 행렬 X와 가중치 행렬 V를 사용하여 공분산 행렬을 구합\n",
    "cov_matrix = np.linalg.inv(X.T @ V @ X)\n",
    "\n",
    "#  5. 공분산 행렬의 대각 성분에서 표준 오차 구함\n",
    "standard_errors = np.sqrt(np.diag(cov_matrix))\n",
    "standard_errors   # [1.09103687e-03, 3.26327254e-01, 1.26946831e-01, 2.26663903e-01, 1.13543661e+00]\n",
    "model2.coef_      # [ 0.00239433,  0.69778363, -0.55295011, -0.13872399]\n",
    "model2.intercept_ # [-3.18837101]\n",
    "coefs_with_intercept = np.concatenate([model2.coef_, [model2.intercept_]], axis=1)\n",
    "\n",
    "# 6. 검정 통계량을 계산하고 분포에서 확인\n",
    "z_statistics = coefs_with_intercept / standard_errors\n",
    "p_values = 2 * (1 - norm.cdf(np.abs(z_statistics)))\n",
    "p_values          # [2.81960331e-02, 3.24928845e-02, 1.32605153e-05, 5.40521161e-01,4.98413636e-03]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
